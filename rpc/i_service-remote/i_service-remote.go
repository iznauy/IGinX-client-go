// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"rpc"
)

var _ = rpc.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  OpenSessionResp openSession(OpenSessionReq req)")
  fmt.Fprintln(os.Stderr, "  Status closeSession(CloseSessionReq req)")
  fmt.Fprintln(os.Stderr, "  Status deleteColumns(DeleteColumnsReq req)")
  fmt.Fprintln(os.Stderr, "  Status insertColumnRecords(InsertColumnRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  Status insertNonAlignedColumnRecords(InsertNonAlignedColumnRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  Status insertRowRecords(InsertRowRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  Status insertNonAlignedRowRecords(InsertNonAlignedRowRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  Status deleteDataInColumns(DeleteDataInColumnsReq req)")
  fmt.Fprintln(os.Stderr, "  QueryDataResp queryData(QueryDataReq req)")
  fmt.Fprintln(os.Stderr, "  Status addStorageEngines(AddStorageEnginesReq req)")
  fmt.Fprintln(os.Stderr, "  Status removeHistoryDataSource(RemoveHistoryDataSourceReq req)")
  fmt.Fprintln(os.Stderr, "  AggregateQueryResp aggregateQuery(AggregateQueryReq req)")
  fmt.Fprintln(os.Stderr, "  LastQueryResp lastQuery(LastQueryReq req)")
  fmt.Fprintln(os.Stderr, "  DownsampleQueryResp downsampleQuery(DownsampleQueryReq req)")
  fmt.Fprintln(os.Stderr, "  ShowColumnsResp showColumns(ShowColumnsReq req)")
  fmt.Fprintln(os.Stderr, "  GetReplicaNumResp getReplicaNum(GetReplicaNumReq req)")
  fmt.Fprintln(os.Stderr, "  ExecuteSqlResp executeSql(ExecuteSqlReq req)")
  fmt.Fprintln(os.Stderr, "  Status updateUser(UpdateUserReq req)")
  fmt.Fprintln(os.Stderr, "  Status addUser(AddUserReq req)")
  fmt.Fprintln(os.Stderr, "  Status deleteUser(DeleteUserReq req)")
  fmt.Fprintln(os.Stderr, "  GetUserResp getUser(GetUserReq req)")
  fmt.Fprintln(os.Stderr, "  GetClusterInfoResp getClusterInfo(GetClusterInfoReq req)")
  fmt.Fprintln(os.Stderr, "  ExecuteStatementResp executeStatement(ExecuteStatementReq req)")
  fmt.Fprintln(os.Stderr, "  FetchResultsResp fetchResults(FetchResultsReq req)")
  fmt.Fprintln(os.Stderr, "  Status closeStatement(CloseStatementReq req)")
  fmt.Fprintln(os.Stderr, "  CommitTransformJobResp commitTransformJob(CommitTransformJobReq req)")
  fmt.Fprintln(os.Stderr, "  QueryTransformJobStatusResp queryTransformJobStatus(QueryTransformJobStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ShowEligibleJobResp showEligibleJob(ShowEligibleJobReq req)")
  fmt.Fprintln(os.Stderr, "  Status cancelTransformJob(CancelTransformJobReq req)")
  fmt.Fprintln(os.Stderr, "  Status registerTask(RegisterTaskReq req)")
  fmt.Fprintln(os.Stderr, "  Status dropTask(DropTaskReq req)")
  fmt.Fprintln(os.Stderr, "  GetRegisterTaskInfoResp getRegisterTaskInfo(GetRegisterTaskInfoReq req)")
  fmt.Fprintln(os.Stderr, "  CurveMatchResp curveMatch(CurveMatchReq req)")
  fmt.Fprintln(os.Stderr, "  DebugInfoResp debugInfo(DebugInfoReq req)")
  fmt.Fprintln(os.Stderr, "  LoadAvailableEndPointsResp loadAvailableEndPoints(LoadAvailableEndPointsReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := rpc.NewIServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "openSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenSession requires 1 args")
      flag.Usage()
    }
    arg361 := flag.Arg(1)
    mbTrans362 := thrift.NewTMemoryBufferLen(len(arg361))
    defer mbTrans362.Close()
    _, err363 := mbTrans362.WriteString(arg361)
    if err363 != nil {
      Usage()
      return
    }
    factory364 := thrift.NewTJSONProtocolFactory()
    jsProt365 := factory364.GetProtocol(mbTrans362)
    argvalue0 := rpc.NewOpenSessionReq()
    err366 := argvalue0.Read(context.Background(), jsProt365)
    if err366 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "closeSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseSession requires 1 args")
      flag.Usage()
    }
    arg367 := flag.Arg(1)
    mbTrans368 := thrift.NewTMemoryBufferLen(len(arg367))
    defer mbTrans368.Close()
    _, err369 := mbTrans368.WriteString(arg367)
    if err369 != nil {
      Usage()
      return
    }
    factory370 := thrift.NewTJSONProtocolFactory()
    jsProt371 := factory370.GetProtocol(mbTrans368)
    argvalue0 := rpc.NewCloseSessionReq()
    err372 := argvalue0.Read(context.Background(), jsProt371)
    if err372 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CloseSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteColumns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteColumns requires 1 args")
      flag.Usage()
    }
    arg373 := flag.Arg(1)
    mbTrans374 := thrift.NewTMemoryBufferLen(len(arg373))
    defer mbTrans374.Close()
    _, err375 := mbTrans374.WriteString(arg373)
    if err375 != nil {
      Usage()
      return
    }
    factory376 := thrift.NewTJSONProtocolFactory()
    jsProt377 := factory376.GetProtocol(mbTrans374)
    argvalue0 := rpc.NewDeleteColumnsReq()
    err378 := argvalue0.Read(context.Background(), jsProt377)
    if err378 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertColumnRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertColumnRecords requires 1 args")
      flag.Usage()
    }
    arg379 := flag.Arg(1)
    mbTrans380 := thrift.NewTMemoryBufferLen(len(arg379))
    defer mbTrans380.Close()
    _, err381 := mbTrans380.WriteString(arg379)
    if err381 != nil {
      Usage()
      return
    }
    factory382 := thrift.NewTJSONProtocolFactory()
    jsProt383 := factory382.GetProtocol(mbTrans380)
    argvalue0 := rpc.NewInsertColumnRecordsReq()
    err384 := argvalue0.Read(context.Background(), jsProt383)
    if err384 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertColumnRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertNonAlignedColumnRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertNonAlignedColumnRecords requires 1 args")
      flag.Usage()
    }
    arg385 := flag.Arg(1)
    mbTrans386 := thrift.NewTMemoryBufferLen(len(arg385))
    defer mbTrans386.Close()
    _, err387 := mbTrans386.WriteString(arg385)
    if err387 != nil {
      Usage()
      return
    }
    factory388 := thrift.NewTJSONProtocolFactory()
    jsProt389 := factory388.GetProtocol(mbTrans386)
    argvalue0 := rpc.NewInsertNonAlignedColumnRecordsReq()
    err390 := argvalue0.Read(context.Background(), jsProt389)
    if err390 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertNonAlignedColumnRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertRowRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertRowRecords requires 1 args")
      flag.Usage()
    }
    arg391 := flag.Arg(1)
    mbTrans392 := thrift.NewTMemoryBufferLen(len(arg391))
    defer mbTrans392.Close()
    _, err393 := mbTrans392.WriteString(arg391)
    if err393 != nil {
      Usage()
      return
    }
    factory394 := thrift.NewTJSONProtocolFactory()
    jsProt395 := factory394.GetProtocol(mbTrans392)
    argvalue0 := rpc.NewInsertRowRecordsReq()
    err396 := argvalue0.Read(context.Background(), jsProt395)
    if err396 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertRowRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertNonAlignedRowRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertNonAlignedRowRecords requires 1 args")
      flag.Usage()
    }
    arg397 := flag.Arg(1)
    mbTrans398 := thrift.NewTMemoryBufferLen(len(arg397))
    defer mbTrans398.Close()
    _, err399 := mbTrans398.WriteString(arg397)
    if err399 != nil {
      Usage()
      return
    }
    factory400 := thrift.NewTJSONProtocolFactory()
    jsProt401 := factory400.GetProtocol(mbTrans398)
    argvalue0 := rpc.NewInsertNonAlignedRowRecordsReq()
    err402 := argvalue0.Read(context.Background(), jsProt401)
    if err402 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertNonAlignedRowRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteDataInColumns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteDataInColumns requires 1 args")
      flag.Usage()
    }
    arg403 := flag.Arg(1)
    mbTrans404 := thrift.NewTMemoryBufferLen(len(arg403))
    defer mbTrans404.Close()
    _, err405 := mbTrans404.WriteString(arg403)
    if err405 != nil {
      Usage()
      return
    }
    factory406 := thrift.NewTJSONProtocolFactory()
    jsProt407 := factory406.GetProtocol(mbTrans404)
    argvalue0 := rpc.NewDeleteDataInColumnsReq()
    err408 := argvalue0.Read(context.Background(), jsProt407)
    if err408 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteDataInColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "queryData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryData requires 1 args")
      flag.Usage()
    }
    arg409 := flag.Arg(1)
    mbTrans410 := thrift.NewTMemoryBufferLen(len(arg409))
    defer mbTrans410.Close()
    _, err411 := mbTrans410.WriteString(arg409)
    if err411 != nil {
      Usage()
      return
    }
    factory412 := thrift.NewTJSONProtocolFactory()
    jsProt413 := factory412.GetProtocol(mbTrans410)
    argvalue0 := rpc.NewQueryDataReq()
    err414 := argvalue0.Read(context.Background(), jsProt413)
    if err414 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addStorageEngines":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddStorageEngines requires 1 args")
      flag.Usage()
    }
    arg415 := flag.Arg(1)
    mbTrans416 := thrift.NewTMemoryBufferLen(len(arg415))
    defer mbTrans416.Close()
    _, err417 := mbTrans416.WriteString(arg415)
    if err417 != nil {
      Usage()
      return
    }
    factory418 := thrift.NewTJSONProtocolFactory()
    jsProt419 := factory418.GetProtocol(mbTrans416)
    argvalue0 := rpc.NewAddStorageEnginesReq()
    err420 := argvalue0.Read(context.Background(), jsProt419)
    if err420 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddStorageEngines(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeHistoryDataSource":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveHistoryDataSource requires 1 args")
      flag.Usage()
    }
    arg421 := flag.Arg(1)
    mbTrans422 := thrift.NewTMemoryBufferLen(len(arg421))
    defer mbTrans422.Close()
    _, err423 := mbTrans422.WriteString(arg421)
    if err423 != nil {
      Usage()
      return
    }
    factory424 := thrift.NewTJSONProtocolFactory()
    jsProt425 := factory424.GetProtocol(mbTrans422)
    argvalue0 := rpc.NewRemoveHistoryDataSourceReq()
    err426 := argvalue0.Read(context.Background(), jsProt425)
    if err426 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveHistoryDataSource(context.Background(), value0))
    fmt.Print("\n")
    break
  case "aggregateQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AggregateQuery requires 1 args")
      flag.Usage()
    }
    arg427 := flag.Arg(1)
    mbTrans428 := thrift.NewTMemoryBufferLen(len(arg427))
    defer mbTrans428.Close()
    _, err429 := mbTrans428.WriteString(arg427)
    if err429 != nil {
      Usage()
      return
    }
    factory430 := thrift.NewTJSONProtocolFactory()
    jsProt431 := factory430.GetProtocol(mbTrans428)
    argvalue0 := rpc.NewAggregateQueryReq()
    err432 := argvalue0.Read(context.Background(), jsProt431)
    if err432 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AggregateQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lastQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LastQuery requires 1 args")
      flag.Usage()
    }
    arg433 := flag.Arg(1)
    mbTrans434 := thrift.NewTMemoryBufferLen(len(arg433))
    defer mbTrans434.Close()
    _, err435 := mbTrans434.WriteString(arg433)
    if err435 != nil {
      Usage()
      return
    }
    factory436 := thrift.NewTJSONProtocolFactory()
    jsProt437 := factory436.GetProtocol(mbTrans434)
    argvalue0 := rpc.NewLastQueryReq()
    err438 := argvalue0.Read(context.Background(), jsProt437)
    if err438 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LastQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "downsampleQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DownsampleQuery requires 1 args")
      flag.Usage()
    }
    arg439 := flag.Arg(1)
    mbTrans440 := thrift.NewTMemoryBufferLen(len(arg439))
    defer mbTrans440.Close()
    _, err441 := mbTrans440.WriteString(arg439)
    if err441 != nil {
      Usage()
      return
    }
    factory442 := thrift.NewTJSONProtocolFactory()
    jsProt443 := factory442.GetProtocol(mbTrans440)
    argvalue0 := rpc.NewDownsampleQueryReq()
    err444 := argvalue0.Read(context.Background(), jsProt443)
    if err444 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DownsampleQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "showColumns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowColumns requires 1 args")
      flag.Usage()
    }
    arg445 := flag.Arg(1)
    mbTrans446 := thrift.NewTMemoryBufferLen(len(arg445))
    defer mbTrans446.Close()
    _, err447 := mbTrans446.WriteString(arg445)
    if err447 != nil {
      Usage()
      return
    }
    factory448 := thrift.NewTJSONProtocolFactory()
    jsProt449 := factory448.GetProtocol(mbTrans446)
    argvalue0 := rpc.NewShowColumnsReq()
    err450 := argvalue0.Read(context.Background(), jsProt449)
    if err450 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getReplicaNum":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReplicaNum requires 1 args")
      flag.Usage()
    }
    arg451 := flag.Arg(1)
    mbTrans452 := thrift.NewTMemoryBufferLen(len(arg451))
    defer mbTrans452.Close()
    _, err453 := mbTrans452.WriteString(arg451)
    if err453 != nil {
      Usage()
      return
    }
    factory454 := thrift.NewTJSONProtocolFactory()
    jsProt455 := factory454.GetProtocol(mbTrans452)
    argvalue0 := rpc.NewGetReplicaNumReq()
    err456 := argvalue0.Read(context.Background(), jsProt455)
    if err456 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetReplicaNum(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeSql":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteSql requires 1 args")
      flag.Usage()
    }
    arg457 := flag.Arg(1)
    mbTrans458 := thrift.NewTMemoryBufferLen(len(arg457))
    defer mbTrans458.Close()
    _, err459 := mbTrans458.WriteString(arg457)
    if err459 != nil {
      Usage()
      return
    }
    factory460 := thrift.NewTJSONProtocolFactory()
    jsProt461 := factory460.GetProtocol(mbTrans458)
    argvalue0 := rpc.NewExecuteSqlReq()
    err462 := argvalue0.Read(context.Background(), jsProt461)
    if err462 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteSql(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateUser requires 1 args")
      flag.Usage()
    }
    arg463 := flag.Arg(1)
    mbTrans464 := thrift.NewTMemoryBufferLen(len(arg463))
    defer mbTrans464.Close()
    _, err465 := mbTrans464.WriteString(arg463)
    if err465 != nil {
      Usage()
      return
    }
    factory466 := thrift.NewTJSONProtocolFactory()
    jsProt467 := factory466.GetProtocol(mbTrans464)
    argvalue0 := rpc.NewUpdateUserReq()
    err468 := argvalue0.Read(context.Background(), jsProt467)
    if err468 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddUser requires 1 args")
      flag.Usage()
    }
    arg469 := flag.Arg(1)
    mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
    defer mbTrans470.Close()
    _, err471 := mbTrans470.WriteString(arg469)
    if err471 != nil {
      Usage()
      return
    }
    factory472 := thrift.NewTJSONProtocolFactory()
    jsProt473 := factory472.GetProtocol(mbTrans470)
    argvalue0 := rpc.NewAddUserReq()
    err474 := argvalue0.Read(context.Background(), jsProt473)
    if err474 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteUser requires 1 args")
      flag.Usage()
    }
    arg475 := flag.Arg(1)
    mbTrans476 := thrift.NewTMemoryBufferLen(len(arg475))
    defer mbTrans476.Close()
    _, err477 := mbTrans476.WriteString(arg475)
    if err477 != nil {
      Usage()
      return
    }
    factory478 := thrift.NewTJSONProtocolFactory()
    jsProt479 := factory478.GetProtocol(mbTrans476)
    argvalue0 := rpc.NewDeleteUserReq()
    err480 := argvalue0.Read(context.Background(), jsProt479)
    if err480 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUser requires 1 args")
      flag.Usage()
    }
    arg481 := flag.Arg(1)
    mbTrans482 := thrift.NewTMemoryBufferLen(len(arg481))
    defer mbTrans482.Close()
    _, err483 := mbTrans482.WriteString(arg481)
    if err483 != nil {
      Usage()
      return
    }
    factory484 := thrift.NewTJSONProtocolFactory()
    jsProt485 := factory484.GetProtocol(mbTrans482)
    argvalue0 := rpc.NewGetUserReq()
    err486 := argvalue0.Read(context.Background(), jsProt485)
    if err486 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getClusterInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetClusterInfo requires 1 args")
      flag.Usage()
    }
    arg487 := flag.Arg(1)
    mbTrans488 := thrift.NewTMemoryBufferLen(len(arg487))
    defer mbTrans488.Close()
    _, err489 := mbTrans488.WriteString(arg487)
    if err489 != nil {
      Usage()
      return
    }
    factory490 := thrift.NewTJSONProtocolFactory()
    jsProt491 := factory490.GetProtocol(mbTrans488)
    argvalue0 := rpc.NewGetClusterInfoReq()
    err492 := argvalue0.Read(context.Background(), jsProt491)
    if err492 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetClusterInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeStatement":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteStatement requires 1 args")
      flag.Usage()
    }
    arg493 := flag.Arg(1)
    mbTrans494 := thrift.NewTMemoryBufferLen(len(arg493))
    defer mbTrans494.Close()
    _, err495 := mbTrans494.WriteString(arg493)
    if err495 != nil {
      Usage()
      return
    }
    factory496 := thrift.NewTJSONProtocolFactory()
    jsProt497 := factory496.GetProtocol(mbTrans494)
    argvalue0 := rpc.NewExecuteStatementReq()
    err498 := argvalue0.Read(context.Background(), jsProt497)
    if err498 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteStatement(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchResults":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchResults requires 1 args")
      flag.Usage()
    }
    arg499 := flag.Arg(1)
    mbTrans500 := thrift.NewTMemoryBufferLen(len(arg499))
    defer mbTrans500.Close()
    _, err501 := mbTrans500.WriteString(arg499)
    if err501 != nil {
      Usage()
      return
    }
    factory502 := thrift.NewTJSONProtocolFactory()
    jsProt503 := factory502.GetProtocol(mbTrans500)
    argvalue0 := rpc.NewFetchResultsReq()
    err504 := argvalue0.Read(context.Background(), jsProt503)
    if err504 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchResults(context.Background(), value0))
    fmt.Print("\n")
    break
  case "closeStatement":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseStatement requires 1 args")
      flag.Usage()
    }
    arg505 := flag.Arg(1)
    mbTrans506 := thrift.NewTMemoryBufferLen(len(arg505))
    defer mbTrans506.Close()
    _, err507 := mbTrans506.WriteString(arg505)
    if err507 != nil {
      Usage()
      return
    }
    factory508 := thrift.NewTJSONProtocolFactory()
    jsProt509 := factory508.GetProtocol(mbTrans506)
    argvalue0 := rpc.NewCloseStatementReq()
    err510 := argvalue0.Read(context.Background(), jsProt509)
    if err510 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CloseStatement(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitTransformJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitTransformJob requires 1 args")
      flag.Usage()
    }
    arg511 := flag.Arg(1)
    mbTrans512 := thrift.NewTMemoryBufferLen(len(arg511))
    defer mbTrans512.Close()
    _, err513 := mbTrans512.WriteString(arg511)
    if err513 != nil {
      Usage()
      return
    }
    factory514 := thrift.NewTJSONProtocolFactory()
    jsProt515 := factory514.GetProtocol(mbTrans512)
    argvalue0 := rpc.NewCommitTransformJobReq()
    err516 := argvalue0.Read(context.Background(), jsProt515)
    if err516 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CommitTransformJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "queryTransformJobStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryTransformJobStatus requires 1 args")
      flag.Usage()
    }
    arg517 := flag.Arg(1)
    mbTrans518 := thrift.NewTMemoryBufferLen(len(arg517))
    defer mbTrans518.Close()
    _, err519 := mbTrans518.WriteString(arg517)
    if err519 != nil {
      Usage()
      return
    }
    factory520 := thrift.NewTJSONProtocolFactory()
    jsProt521 := factory520.GetProtocol(mbTrans518)
    argvalue0 := rpc.NewQueryTransformJobStatusReq()
    err522 := argvalue0.Read(context.Background(), jsProt521)
    if err522 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryTransformJobStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "showEligibleJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowEligibleJob requires 1 args")
      flag.Usage()
    }
    arg523 := flag.Arg(1)
    mbTrans524 := thrift.NewTMemoryBufferLen(len(arg523))
    defer mbTrans524.Close()
    _, err525 := mbTrans524.WriteString(arg523)
    if err525 != nil {
      Usage()
      return
    }
    factory526 := thrift.NewTJSONProtocolFactory()
    jsProt527 := factory526.GetProtocol(mbTrans524)
    argvalue0 := rpc.NewShowEligibleJobReq()
    err528 := argvalue0.Read(context.Background(), jsProt527)
    if err528 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowEligibleJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancelTransformJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelTransformJob requires 1 args")
      flag.Usage()
    }
    arg529 := flag.Arg(1)
    mbTrans530 := thrift.NewTMemoryBufferLen(len(arg529))
    defer mbTrans530.Close()
    _, err531 := mbTrans530.WriteString(arg529)
    if err531 != nil {
      Usage()
      return
    }
    factory532 := thrift.NewTJSONProtocolFactory()
    jsProt533 := factory532.GetProtocol(mbTrans530)
    argvalue0 := rpc.NewCancelTransformJobReq()
    err534 := argvalue0.Read(context.Background(), jsProt533)
    if err534 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelTransformJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerTask":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterTask requires 1 args")
      flag.Usage()
    }
    arg535 := flag.Arg(1)
    mbTrans536 := thrift.NewTMemoryBufferLen(len(arg535))
    defer mbTrans536.Close()
    _, err537 := mbTrans536.WriteString(arg535)
    if err537 != nil {
      Usage()
      return
    }
    factory538 := thrift.NewTJSONProtocolFactory()
    jsProt539 := factory538.GetProtocol(mbTrans536)
    argvalue0 := rpc.NewRegisterTaskReq()
    err540 := argvalue0.Read(context.Background(), jsProt539)
    if err540 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegisterTask(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropTask":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTask requires 1 args")
      flag.Usage()
    }
    arg541 := flag.Arg(1)
    mbTrans542 := thrift.NewTMemoryBufferLen(len(arg541))
    defer mbTrans542.Close()
    _, err543 := mbTrans542.WriteString(arg541)
    if err543 != nil {
      Usage()
      return
    }
    factory544 := thrift.NewTJSONProtocolFactory()
    jsProt545 := factory544.GetProtocol(mbTrans542)
    argvalue0 := rpc.NewDropTaskReq()
    err546 := argvalue0.Read(context.Background(), jsProt545)
    if err546 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTask(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRegisterTaskInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRegisterTaskInfo requires 1 args")
      flag.Usage()
    }
    arg547 := flag.Arg(1)
    mbTrans548 := thrift.NewTMemoryBufferLen(len(arg547))
    defer mbTrans548.Close()
    _, err549 := mbTrans548.WriteString(arg547)
    if err549 != nil {
      Usage()
      return
    }
    factory550 := thrift.NewTJSONProtocolFactory()
    jsProt551 := factory550.GetProtocol(mbTrans548)
    argvalue0 := rpc.NewGetRegisterTaskInfoReq()
    err552 := argvalue0.Read(context.Background(), jsProt551)
    if err552 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRegisterTaskInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "curveMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CurveMatch requires 1 args")
      flag.Usage()
    }
    arg553 := flag.Arg(1)
    mbTrans554 := thrift.NewTMemoryBufferLen(len(arg553))
    defer mbTrans554.Close()
    _, err555 := mbTrans554.WriteString(arg553)
    if err555 != nil {
      Usage()
      return
    }
    factory556 := thrift.NewTJSONProtocolFactory()
    jsProt557 := factory556.GetProtocol(mbTrans554)
    argvalue0 := rpc.NewCurveMatchReq()
    err558 := argvalue0.Read(context.Background(), jsProt557)
    if err558 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CurveMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "debugInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DebugInfo requires 1 args")
      flag.Usage()
    }
    arg559 := flag.Arg(1)
    mbTrans560 := thrift.NewTMemoryBufferLen(len(arg559))
    defer mbTrans560.Close()
    _, err561 := mbTrans560.WriteString(arg559)
    if err561 != nil {
      Usage()
      return
    }
    factory562 := thrift.NewTJSONProtocolFactory()
    jsProt563 := factory562.GetProtocol(mbTrans560)
    argvalue0 := rpc.NewDebugInfoReq()
    err564 := argvalue0.Read(context.Background(), jsProt563)
    if err564 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DebugInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "loadAvailableEndPoints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoadAvailableEndPoints requires 1 args")
      flag.Usage()
    }
    arg565 := flag.Arg(1)
    mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
    defer mbTrans566.Close()
    _, err567 := mbTrans566.WriteString(arg565)
    if err567 != nil {
      Usage()
      return
    }
    factory568 := thrift.NewTJSONProtocolFactory()
    jsProt569 := factory568.GetProtocol(mbTrans566)
    argvalue0 := rpc.NewLoadAvailableEndPointsReq()
    err570 := argvalue0.Read(context.Background(), jsProt569)
    if err570 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoadAvailableEndPoints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
